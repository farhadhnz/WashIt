@page "/booking"

@using Models
@inject HttpClient Http

<h3>Booking</h3>

@if (washingModes == null || !washingModes.Any())
{
    <div>...Loading...</div>
}
else
{
    <div>Select Washing Mode:</div>
    <select @bind="duration">
    <option value="0" selected="true">--select--</option>
    @foreach (var op in washingModes)
        {
            <option value="@op.Duration">@op.Name @op.Temperature degrees @op.Duration minutes</option>
        }

    </select>
}

<div>
    Date:
    @currentDateTime.ToShortDateString()
</div>

<button @onclick="@(e => UpdateList())">
    Search
</button>

<button @onclick="@(e => AddToWaitingList(currentDateTime))">
    Waiting List
</button>

@if (availableBookings != null && availableBookings.Any())
{
    <table>
    <tbody>
        @foreach (var hour in hours)
            {
                <i>@hour</i>
                foreach (var min in minutes)
                {
                    var date = currentDateTime.Date.ToShortDateString();
                    var dateTime = DateTime.Parse($"{date} {hour}:{min}");
                    var isEnabled = availableBookings.Any(x => x.StartTime.Equals(dateTime));
                    var trClass = "";

                    @if (!isEnabled)
                        trClass = "disabledTr";
                    <tr class="@trClass" @onclick="@(e => RegisterBooking(dateTime, isEnabled))">
            <td>:@min</td>
        </tr>
                }
            }
        </tbody>
    </table>

}






@code {
    private const string apiRoot = "https://localhost:7139/";
    private WashingMode[] washingModes;
    private List<BookingItem> availableBookings = new List<BookingItem>();

    private int duration = 0;

    private string[] minutes = { "00", "10", "20", "30", "40", "50" };
    private string[] hours = { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12",
"13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"};

    public int ElementsToHover => duration / 10;

    private void HoverNeededRows()
    {

    }

    private DateTime currentDateTime = DateTime.Now;

    private async Task UpdateList()
    {
        if (duration == 0)
            duration = 90;
        @* availableBookings = await Http.GetFromJsonAsync<List<BookingItem>>($"sample-data/available_bookings{duration}.json");
        *@
        var stringFormat = "MM-dd-yyyy";
        availableBookings = await Http.GetFromJsonAsync<List<BookingItem>>
        ($"{apiRoot}api/booking/date/{currentDateTime.ToString(stringFormat)}/duration/{duration}/");
    }

    private async Task RegisterBooking(DateTime dateTime, bool isEnabled)
    {
        if (!isEnabled)
            return;

        var bookingDto = new BookingCreateDto()
        {
            Date = dateTime,
            StartTime = dateTime,
            EndTime = dateTime + TimeSpan.FromMinutes(duration),
            UserId = 1,
            WashingModeId = washingModes.FirstOrDefault(x => x.Duration == duration).Id,
            DeviceId = availableBookings.FirstOrDefault(x => x.StartTime.Equals(dateTime)).DeviceId

        };

        await Http.PostAsJsonAsync(apiRoot + "api/booking/", bookingDto);

        await UpdateList();
    }

    private async Task AddToWaitingList(DateTime dateTime)
    {

        var waitingListDto = new WaitingListDto()
        {
            Date = dateTime.Date,
            UserId = 1,
            WashingModeId = washingModes.FirstOrDefault(x => x.Duration == duration).Id,
            DateAdded = DateTime.Now,
            Notified = false
        };

        await Http.PostAsJsonAsync(apiRoot + "api/waitlist/", waitingListDto);
    }

    protected override async Task OnInitializedAsync()
    {
        washingModes = await Http.GetFromJsonAsync<WashingMode[]>("sample-data/washing_modes.json");

    }


}
